from python_solutions.utils import timing


def _compute_next_val(series):
    return sum(series[-2:])


@timing
def compute_sum_even_fibonacci_values_naive(max_value):
    """
    :param max_value:
    :return: the fibonacci series and the list of even values
    """
    series = [1, 2]
    sum_even_values = 2

    while True:
        next_value = _compute_next_val(series)
        if next_value < max_value:
            series.append(next_value)
            if next_value % 2 == 0:
                sum_even_values += next_value
        else:
            break
    return sum_even_values


@timing
def compute_sum_even_fibonacci_values_optimized(max_value):
    """
    Every third Fibonacci numbers are even
    :param max_value:
    :return: the fibonacci series and the list of even values
    """
    sum_even_values = 0
    a = 1
    b = 1
    c = a + b
    while c < max_value:
        sum_even_values = sum_even_values + c
        a = b + c
        b = c + a
        c = a + b

    return sum_even_values


if __name__ == '__main__':
    """
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
    By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
    find the sum of the even-valued terms.
    """

    max_value = 4000000

    solution = compute_sum_even_fibonacci_values_naive(max_value)

    assert solution == compute_sum_even_fibonacci_values_optimized(max_value)

    print(f'sum even fibonacci values (for a max value {max_value}) : {solution}')
